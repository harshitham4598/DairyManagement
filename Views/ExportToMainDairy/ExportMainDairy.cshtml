@model MilkDairy.Models.ExportToMainDairy
@{
    ViewBag.Title = "Exported Dairy";
}

<div class="loading" style="display:none">Loading</div>

<style>
    .centre {
        font-weight: 600;
    }
</style>

<div class="card margin-top-20">
    <div class="card-header">
        Export to Other Dairy
    </div>
    <div class="card-body">
        @using (Ajax.BeginForm("Save", "MilkAquirement", new AjaxOptions { HttpMethod = "POST" }, new { id = "Form", @class = "needs-validation" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="row">
               
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.dairy_name, htmlAttributes: new { @class = "control-label " })
                    @Html.ValidationMessageFor(model => model.dairy_name, "", new { @class = "text-danger" })
                    @Html.DropDownListFor(m => m.dairy_name, new SelectList(Model.dairys, "society_name", "society_name"), new { @class = "form-control idx" })
                </div>
                 
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.session, htmlAttributes: new { @class = "control-label " })
                    @Html.ValidationMessageFor(model => model.session, "", new { @class = "text-danger" })
                    @Html.DropDownListFor(model => model.session, new[]{
                                        new SelectListItem(){ Text = "Morning", Value = "Morning"},
                                        new SelectListItem(){ Text = "Evening", Value = "Evening"}}, new { @class = "form-control" })

                </div>

                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.date, htmlAttributes: new { @class = "control-label " })
                    @Html.ValidationMessageFor(model => model.date, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.date, "{0:yyyy-MM-dd}", new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.snf, htmlAttributes: new { @class = "control-label " })
                    @Html.ValidationMessageFor(model => model.snf, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.snf, new { htmlAttributes = new { @class = "form-control" } })
                </div>

                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.fat, htmlAttributes: new { @class = "control-label " })
                    @Html.ValidationMessageFor(model => model.fat, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.fat, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.price, htmlAttributes: new { @class = "control-label " })
                    @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
                    @Html.DropDownListFor(m => m.price, new SelectList(Model.prices_amt, "price", "price"), new { @class = "form-control idx" })
                </div>
                  
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.litre, htmlAttributes: new { @class = "control-label " })
                    @Html.ValidationMessageFor(model => model.litre, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.litre, new { htmlAttributes = new { @class = "form-control", @id = "litre" } })
                </div>
                
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.total_amt, htmlAttributes: new { @class = "control-label " })
                    @Html.ValidationMessageFor(model => model.total_amt, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.total_amt, new { htmlAttributes = new { @class = "form-control", @id = "total" } })
                </div>


                <div class="col-md-12 margin-top-30" style="float:right;">
                    @if (Model.slno == 0)
                    {
                        <div style="float:right">
                            <button type="submit" class="btn btn-col">Save</button>
                            <button type="reset" class="btn btn-col">Reset</button>
                        </div>
                    }
                    else
                    {
                        <div class=" " style="float:right">
                            <input type="submit" value="Update" class="btn btn-col" />
                        </div>
                    }


                </div>
                @Html.HiddenFor(model => model.slno)
            </div>

            @*<div class="  margin-top-10">
                <table class="table table-bordered table-hover data" id="Datatable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Litre</th>
                            <th>Price</th>
                            <th>Total Amt</th>
                            <th>Session</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot>
                        <tr>
                            <td></td>
                            <td class="centre"></td>
                            <td class="centre"></td>
                            <td></td>
                            <td class="centre"></td>
                            <td></td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
            </div>*@
        }


    </div>
    <div class="card-footer">
        <div class="panel-footer">
            @Html.ActionLink("New", "ExportMainDairy", null, new { id = "backLink" }) &nbsp; /&nbsp;
            @Html.ActionLink("Back to list", "Fetch", null, new { id = "backLink" })
        </div>
    </div>
</div>
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")


    <script>
    $(document).ready(function () {

        var table = $('#Datatable').DataTable({
            ajax: {
                url: "@Url.Action("FetchJson")",
                dataSrc:""
            },
            lengthMenu: [[3, 5, 10, -1], [3, 5, 10, "ALL"]],
            responsive: true,

            columns: [
                {
                    data: "member_id"
                },
                 {
                     data: "member_name"
                 },
                     {
                         data: "litre"
                     },
                     {
                         data: "price"
                     },
                      {
                          data: "total_amt"
                      },
                        {
                            data: "session"
                        },

                {
                    data: "slno",
                    render: function (data) {
                        return '<button type="button" class="w3-white btn btn-primary btn-sm p-delete bg-danger "  data-profam-id="' + data + '"><img src="../Content/Ninestars/assets/img/icons8-delete-bin-24.png" /></button><button type="button" class="margin-left btn  btn-info btn-sm btnside p-edit"  data-pro-id="' + data + '"><img src="../Content/Ninestars/assets/img/icons8-edit-24.png" /></i></button>'
                    }
                }

            ],
              "footerCallback": function (row, data, start, end, display) {
                  var api = this.api(), data;

                  // converting to interger to find total
                  var intVal = function (i) {
                      return typeof i === 'string' ?
                          i.replace(/[\$,]/g, '') * 1 :
                          typeof i === 'number' ?
                          i : 0;
                  };
                  // computing column Total of the complete result
                  var AmtTotal = api
                         .column(4)
                         .data()
                         .reduce(function (a, b) {
                             return intVal(a) + intVal(b);
                         }, 0);
                  var litre = api
                       .column(2)
                       .data()
                       .reduce(function (a, b) {
                           return intVal(a) + intVal(b);
                       }, 0);
                  $(api.column(1).footer()).html('Total');
                  $(api.column(2).footer()).html(litre.toFixed(2));
                  $(api.column(4).footer()).html(AmtTotal.toFixed(2));


              }
        })

 
    

        //saving
        $('#Form').submit(function (e) {
            e.preventDefault();
            e.stopImmediatePropagation()
            if ($('#Form').valid()) {
                var action = $('#Form').attr('action')
                var data = new FormData($('#Form').get(0));
                $('.loading').show()
                $.ajax({
                    url: action,
                    data: data,
                    contentType: false,
                    processData: false,
                    type: 'POST',
                    dataType: 'json',
                    success: function (result) {
                        if (result.Success) {
                         //   table.ajax.reload()
                            $('.loading').hide();
                            $('#Form').trigger("reset");
                            toastr.success(result.Message, "Success", { positionClass: "toast-top-center" })
                        }
                        else {
                            $('.loading').hide();
                            toastr.error(result.Message, "Error", { positionClass: "toast-top-center" })
                        }
                        //setTimeout(function () {
                        //    window.location.href = "/Master_keonicscompany/keonics";
                        //}, 80)
                    },
                    error: function () {
                        $('.loading').hide()
                        toastr.error("Server Error", "Error", { positionClass: "toast-top-center" })
                    }
                })
            }
        })


        $('#litre').on('keyup', function () {

            var litre = parseFloat($(this).val())
            var price = parseFloat($('#price').val())
            var total = (price * litre)
            $('#total').val(total.toFixed(2));


        })


        

 








    })
    </script>



}